What happens when you initialize a repository? Why do you need to do it?

New file .git is created. You need to create a new repository in order to start creating commits. 


How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area contains the files to be committed, while repository contains history of the already created commits, and working directory contains only files and .git without history. 



How can you use the staging area to make sure you have one commit per logical change?
You can add files to the staging area only when the changes were made to them and you can run comparison of the staging area and working directory in order to see if indeed only 1 logical change was made 


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Situation when you need to have several versions of the program: different language, different features. The beaches would allow you to have several non-historical versions of commits which will allow you to come back to those features later or just simply not user without changing the program 



How do the diagrams help you visualize the branch structure?
Diagrams help you to see which brach has which commits and whether there are any commits that do no have any brach and cannot be reached. 



What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The result of the 2 branches merging together is a new commit on 1 of the beaches. We represent branches in diagram so it would be easier to see which beaches existed and which commit did they merge to. 




What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Git merges automatically by adding parts which were not there before. In case of Git merge the time of the merge is much shorter. However, if the same part of code was modified Git might not merge it correctly. 
